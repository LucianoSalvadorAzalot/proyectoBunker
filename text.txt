

//PRODUCTOS 
const [Id_producto, setId_producto] = useState("")
const [nombre_producto, setNombreProducto] = useState("")
const [descripcion_producto, setDescripcionProducto] = useState("")
const [precio_producto, setPrecioProducto] = useState("")
const [cantidad_producto, setCantidadProducto] = useState("")

//VENTA
const [Id_venta, setIdVenta] = useState("")
const [drescripcion_venta, setDescripcion_venta] = ("")
const [precioTotal_venta, setPrecioTotal] = ("")

//CLIENTES
const [Id_cliente, setIdCliente] = useState("")
const [nombre_cliente, setNombre_cliente] = useState("")
const [apellido_cliente, setApellido_cliente] = useState("")
const [telefono_cliente, setTelefonoCliente] = useState("")
const [correo_cliente, setCorreoCliente] = useState("")
const [codigoPostal_cliente, setCodigoPostal] = useState("")
const [domicilio_cliente, setDomicilio_cliente] = useState("")
const [ciudad_cliente, setCiudad_cliente] = useState("")

  // const AgregarProducto = () => {
  //   axios.get(`http://localhost:3001/productos`).then((response) => {
  //     const product = response.data;
  
  //     if (product) {
  //       const nuevoProducto = {
  //         Id_producto: product[0].Id_producto, 
  //         nombre_producto: product[0].nombre_producto, 
  //         descripcion_producto: product[0].descripcion_producto, 
  //         precio_producto: product[0].precio_producto, 
  //         cantidad_producto: product[0].cantidad_producto, 
  //         subTotal: product[0].precio_producto * product.cantidad_producto 
  //       };
  //       setProductosList([...productosList, nuevoProducto]);
  //     } else {
  //       console.log('ERROR NO EXISTE ');
  //     }
  //   });
  // };





    //CLIENTES
    // const [Id_cliente, setIdCliente] = useState("")
    // const [nombre_cliente, setNombre_cliente] = useState("")
    // const [apellido_cliente, setApellido_cliente] = useState("")
    // const [telefono_cliente, setTelefonoCliente] = useState("")
    // const [correo_cliente, setCorreoCliente] = useState("")
    // const [codigoPosta_cliente, setCodigoPostal] = useState("")



    //DETALLE VENTA
    // const [Id_detalleVenta, setId_detalleVenta] = useState ("")
    // const [Id_metodoPago, setId_metodoPago] = useState("")
    // const [ventasTotales_detalleVenta, setventasTotales_detalleVenta] =useState ("")
    // const [ganacia_detalleVenta, setGanacia_detalleVenta] =useState ("")
    // const [descripcion_detalleVenta, setDescripcion_detalleVenta] = useState("")



    //ELIMINAR 

    
    const eliminarProducto = (id) => {
      const arrayNuevo = productosList.filter((producto)=> producto.Id_producto !== id)
      console.log(arrayNuevo)
      setProductosList(arrayNuevo)
    }













    /// ULTIMO COMPONENTE ANTES DEL CONTEXT 

     // Estados
  const [productosList, setProductosList] = useState([]);
  const [Id_producto, setId_producto] = useState("");
  const [nombre_producto, setNombreProducto] = useState("");
  const [precio_producto, setPrecioProducto] = useState("");
  const [cantidad_producto, setCantidadProducto] = useState("");
  const [productoSeleccionado, setProductoSeleccionado] = useState("");
  const [descripcion_producto, setDescripcion_producto] = useState("");
  const [verListado, setVerListado] = useState([])

  // Función para cargar un producto por su nombre
  const cargarProducto = (val) => {
    setId_producto(val.Id_producto);
    setNombreProducto(val.nombre_producto);
    setPrecioProducto(val.precio_producto);
    setCantidadProducto(val.cantidad_producto);
  };


  const handleAgregar = () => {
    const existeProducto = productosList.find(
      (producto) => producto.Id_producto === Id_producto
    );
    if (existeProducto) {
      const productosActualizados = productosList.map((producto) => {
        if (producto.Id_producto === Id_producto) {
          return {
            ...producto,
            cantidad_producto:
              Number(producto.cantidad_producto) + Number(cantidad_producto),
          };
        }
        return producto;
      });
      setProductosList(productosActualizados);
    } else {
      const nuevoProducto = {
        Id_producto,
        nombre_producto,
        precio_producto,
        cantidad_producto,
      };
      setProductosList([...productosList, nuevoProducto]);
    }
  };


  const AgregarProducto = (e) => {
    if (e.key === "Enter") {
      axios
        .get(
          `http://localhost:3001/productos?nombre_producto=${nombre_producto}`
        )
        .then((response) => {
          const productoEncontrado = response.data;

          if (productoEncontrado) {
            setId_producto(productoEncontrado.Id_producto);
            setNombreProducto(productoEncontrado.nombre_producto);
            setPrecioProducto(productoEncontrado.precio_producto);
            setCantidadProducto(productoEncontrado.cantidad_producto);
          } else {
            console.log("ERROR NO EXISTE ");
          }
        });
    }
  };

  const verListaConProductos = () =>{
    axios.get("http://localhost:3001/productos").then((response)=>{
      setVerListado(response.data)
      console.log(response.data)
    })
  }
  const handleSeleccionarProducto = (producto) => {
    setProductoSeleccionado(producto);
  };

  // Efecto para cargar el producto seleccionado
  useEffect(() => {
    verListaConProductos()

  }, []);
  useEffect(()=>{
    productoSeleccionado!=null ? cargarProducto(productoSeleccionado) : setNombreProducto("")
   },[productoSeleccionado])
 


//FUNCIONES KEYDOWN 

const manejarKeyDown = (event) => {
  // Verificar si la tecla presionada es la tecla Enter (código 13)
  if (event.key === 'Enter') {
    console.log('Se presionó la tecla f11: ');
    // Aquí puedes realizar cualquier acción que desees al presionar Enter
    // Por ejemplo, enviar un formulario, ejecutar una función, etc.
  }
};

useEffect(()=>{
  document.addEventListener('keydown', manejarKeyDown, true)
},[])


onKeyDown={manejarKeyDown}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////import { useState, useEffect } from 'react';



import axios from 'axios';
import { Button } from 'react-bootstrap';
import Productos from '../components/Productos.jsx';
import * as XLSX from 'xlsx';
import useScanDetection from 'use-scan-detection';

const NuevoProduct = ({ filename, sheetname }) => {
    const [ver, setVer] = useState([]);
    const [nombre_producto, setnombre_Producto] = useState('');
    const [descripcion_producto, setdescripcion_Producto] = useState('');
    const [precioCompra, setPrecioCompra] = useState('');
    const [precioVenta, setPrecioVenta] = useState('');
    const [cantidad_producto, setcantidad_Producto] = useState('');
    const [Id_categoria, setId_categoria] = useState('');
    const [tipoVenta, setTipoVenta] = useState('unidad'); // Agregado para seleccionar el tipo de venta
    const id_sucursal = localStorage.getItem('sucursalId');

    useEffect(() => {
        axios.get(`http://localhost:3001/productos/sucursal/${id_sucursal}`)
            .then((response) => {
                setVer(response.data);
            })
            .catch((error) => {
                console.log('Error al obtener los productos:', error);
            });
    }, [id_sucursal]);

    const exportToExcel = () => {
        const ws = XLSX.utils.json_to_sheet(ver);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, sheetname);
        XLSX.writeFile(wb, `${filename}.xlsx`);
    };

    const crearProductos = () => {
        axios.post("http://localhost:3001/productos/post",
            {
                nombre_producto,
                descripcion_producto,
                precioCompra,
                precioVenta,
                cantidad_producto,
                Id_categoria,
                tipoVenta, // Ahora se incluye el tipo de venta en la petición
                Id_sucursal: id_sucursal
            })
            .then(() => {
                alert('producto creado con éxito');
            })
            .catch(() => {
                console.log('Error al crear el producto:');
            });
    };

    const [value, setValue] = useState("");

    useScanDetection({
        onComplete: setValue,
        minLength: 15
    });

    return (
        <>
            <Productos /><br />
            <div className="container-fluid">
                <div className="row">
                    <div className="col">
                        Nombre: <input type="text" value={nombre_producto} onChange={(e) => setnombre_Producto(e.target.value)} />
                    </div>
                </div>
                <div className="row">
                    <div className="col">
                        Descripcion: <input type="text" value={descripcion_producto} onChange={(e) => setdescripcion_Producto(e.target.value)} />
                    </div>
                </div>
                <div className="row">
                    <div className="col">
                        Precio costo: <input type="text" value={precioCompra} onChange={(e) => setPrecioCompra(e.target.value)} />
                    </div>
                </div>
                <div className="row">
                    <div className="col">
                        Precio venta: <input type="text" value={precioVenta} onChange={(e) => setPrecioVenta(e.target.value)} />
                    </div>
                </div>
                <div className="row">
                    <div className="col">
                        Cantidad: <input type="text" value={cantidad_producto} onChange={(e) => setcantidad_Producto(e.target.value)} />
                    </div>
                </div>
                <div className="row">
                    <div className="col">
                        Departamento: <input type="text" value={Id_categoria} onChange={(e) => setId_categoria(e.target.value)} />
                    </div>
                </div>
                <div className="row">
                    <div className="col">
                        Tipo de venta:
                        <select value={tipoVenta} onChange={(e) => setTipoVenta(e.target.value)}>
                            <option value="unidad">Unidad</option>
                            <option value="granel">Granel</option>
                        </select>
                    </div>
                </div>
                <div className="row">
                    <div className="col">
                        <Button className="btn btn-success" onClick={crearProductos}>Guardar Producto</Button>
                    </div>
                </div>
            </div>
            <table className='table table-striped table-hover mt-5 shadow-lg'>
                <thead>
                    <tr className='table-info'>
                        <th>Id</th>
                        <th>Nombre</th>
                        <th>Descripcion</th>
                        <th>Precio costo</th>
                        <th>Precio venta</th>
                        <th>Cantidad</th>
                        <th>Departamento</th>
                        <th>Fecha de creacion</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        ver.map((val) => (
                            <tr key={val.Id_producto}>
                                <td>{val.Id_producto}</td>
                                <td>{val.nombre_producto}</td>
                                <td>{val.descripcion_producto}</td>
                                <td>{val.precioCompra}</td>
                                <td>{val.precioVenta}</td>
                                <td>{val.cantidad_producto}</td>
                                <td>{val.nombre_categoria}</td>
                                <td>{new Date(val.fecha_registro).toISOString().slice(0, 10)}</td>
                            </tr>
                        ))
                    }
                </tbody>
            </table>
            <button onClick={exportToExcel}>Exportar a Excel</button>
        </>
    );
};

export default NuevoProduct;

                                      <button 
                                      className="btn btn-ouline-primary" 
                                      onClick={()=> disminuirCantidad(productos.Id_producto)}
                                      >-</button>
                                      <button className="btn btn-primary">{productos.cantidad_producto}</button>
                                      <button 
                                      className="btn btn-ouline-primary" 
                                      onClick={ () => aumentarCantidad(productos.Id_producto)}
                                      >+</button>
















                                        <label htmlFor="nombre_sucursal">Nombre de Sucursal:</label>
      <input type="text" id="nombre_sucursal" value={nombre_sucursal} onChange={(e) => setNombre_sucursal(e.target.value)} />
      <label htmlFor="clave">Contraseña:</label>
      <input type="password" id="clave" value={clave} onChange={(e) => setClave(e.target.value)} />
      <button onClick={comprobarLogin}>Login</button>








      
                <div className="row">
                    <div className="col">
                        Tipo de venta:
                        <select value={tipo_venta} onChange={(e) => setTipoVenta(e.target.value)}>
                            <option value="unidad">Unidad</option>
                            <option value="granel">Granel gr</option>
                        </select>
                    </div>
                </div>